// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  TRAINER
}

enum ExerciseCategory {
  CHEST
  BACK
  LEGS
  SHOULDERS
  ARMS
  CORE
  CARDIO
  FULL_BODY
}

enum ExerciseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  salt      String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  trainerId Int?     // ID of the trainer this client is assigned to
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Trainer relations
  trainer            User?               @relation("TrainerClients", fields: [trainerId], references: [id])
  clients            User[]              @relation("TrainerClients")
  createdExercises   Exercise[]          @relation("CreatedExercises")
  createdPrograms    Program[]           @relation("CreatedPrograms")
  assignedPrograms   Program[]           @relation("AssignedPrograms")
  registrationTokens RegistrationToken[]
  usedTokens         RegistrationToken[] @relation("UsedTokens")
  workoutLogs        WorkoutLog[]
  weightEntries      WeightEntry[]

  @@map("users")
}

model Exercise {
  id          Int                @id @default(autoincrement())
  name        String             // Bulgarian name
  nameEn      String?            // English name for reference
  description String?
  category    ExerciseCategory
  difficulty  ExerciseDifficulty
  muscleGroups String            // JSON array of muscle groups
  equipment    String            // JSON array of equipment needed
  videoUrl     String?           // YouTube video ID or full URL
  thumbnailUrl String?           // Thumbnail image URL
  instructions String            // JSON array of instruction steps
  tips         String?           // JSON array of tips
  isActive     Boolean           @default(true)
  createdBy    Int?              // Trainer who created custom exercise
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // Relations
  creator          User?             @relation("CreatedExercises", fields: [createdBy], references: [id])
  programExercises ProgramExercise[]
  
  @@map("exercises")
}

model Program {
  id              Int                @id @default(autoincrement())
  name            String
  description     String?
  trainerId       Int
  clientId        Int?               // null if it's a template
  isTemplate      Boolean            @default(false)
  duration        Int                // weeks
  sessionsPerWeek Int
  difficulty      ExerciseDifficulty
  goals           String             // JSON array of goals
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Relations
  trainer  User              @relation("CreatedPrograms", fields: [trainerId], references: [id])
  client   User?             @relation("AssignedPrograms", fields: [clientId], references: [id])
  sessions ProgramSession[]
  
  @@map("programs")
}

model ProgramSession {
  id         Int      @id @default(autoincrement())
  programId  Int
  name       String   // "Push Day", "Upper Body", etc.
  dayOfWeek  Int?     // 1-7, optional for flexible scheduling
  weekNumber Int
  order      Int
  restDay    Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  program     Program           @relation(fields: [programId], references: [id], onDelete: Cascade)
  exercises   ProgramExercise[]
  workoutLogs WorkoutLog[]

  @@map("program_sessions")
}

model ProgramExercise {
  id            Int     @id @default(autoincrement())
  sessionId     Int
  exerciseId    Int
  order         Int
  sets          Int
  reps          String  // "8-12", "10", "AMRAP", etc.
  weight        Float?  // suggested weight in kg
  restPeriod    Int     // seconds
  tempo         String? // "3-1-2-1" (eccentric-pause-concentric-pause)
  rpe           Int?    // Rate of Perceived Exertion 1-10
  notes         String?
  isSuperset    Boolean @default(false)
  supersetGroup Int?
  createdAt     DateTime @default(now())

  // Relations
  session      ProgramSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise     Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseLogs ExerciseLog[]

  @@map("program_exercises")
}

model RegistrationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  trainerId Int
  usedById  Int?     // ID of the user who used this token
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  trainer User  @relation(fields: [trainerId], references: [id])
  usedBy  User? @relation("UsedTokens", fields: [usedById], references: [id])

  @@map("registration_tokens")
}

model WorkoutLog {
  id                Int      @id @default(autoincrement())
  userId            Int      // client who performed the workout
  programSessionId  Int      // which program session was logged
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  notes             String?
  rating            Int?     // 1-5 stars how the client felt about the workout
  isCompleted       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  programSession  ProgramSession @relation(fields: [programSessionId], references: [id])
  exerciseLogs    ExerciseLog[]

  @@map("workout_logs")
}

model ExerciseLog {
  id                  Int      @id @default(autoincrement())
  workoutLogId        Int
  programExerciseId   Int
  actualSets          Int
  actualReps          String   // "8,10,12" - comma separated reps per set
  actualWeight        String?  // "50,52.5,55" - comma separated weights per set
  actualRestPeriod    Int?     // actual rest taken in seconds
  actualRpe           Int?     // actual RPE 1-10
  notes               String?
  isCompleted         Boolean  @default(false)
  createdAt           DateTime @default(now())

  // Relations
  workoutLog        WorkoutLog      @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
  programExercise   ProgramExercise @relation(fields: [programExerciseId], references: [id])

  @@map("exercise_logs")
}

model WeightEntry {
  id        Int      @id @default(autoincrement())
  userId    Int      // client who recorded the weight
  weight    Float    // weight in kg
  notes     String?  // optional notes about the measurement
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weight_entries")
}
